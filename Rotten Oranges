
Approach: count for the fresh oranges keep running the loop till we find fresh oranges  if ata last fresh oranges will be tending towards zero then return time 

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        queue<pair<int,int>>q;
        int fresh = 0;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j] == 2)q.push({i,j});
                if(grid[i][j] == 1)fresh++;
            }
        }
        
        int time = 0;
        while(fresh!= 0 && !q.empty()){
            time++;
            int size = q.size();
            while(size--){
                int xx = q.front().first;
                int yy = q.front().second;
                q.pop();
                
                int dx[4] = {0,0,1,-1};
                int dy[4] = {1,-1,0,0};
                
                for(int i=0;i<4;i++){
                    int nx = xx + dx[i];
                    int ny = yy + dy[i];
                    
                    if(nx >= 0 && nx < row && ny >= 0 && ny < col && grid[nx][ny] == 1){
                        grid[nx][ny] = 2;
                        fresh--;
                        q.push({nx,ny});
                    }
                }
            }
        }
        return fresh == 0 ? time : -1;
    }
};
