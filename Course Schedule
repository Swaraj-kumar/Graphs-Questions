https://leetcode.com/problems/course-schedule/

class Solution {
public:
    //function checking cycle check
    bool dfs(int node,vector<int> &vis,vector<int> &dfsVis,vector<int> adj[]){
        vis[node] = 1;
        dfsVis[node] = 1;
        for(auto it: adj[node]){
            if(!vis[it]){
                if(dfs(it,vis,dfsVis,adj) == true)return true;
            }
            else if(vis[it] == true && dfsVis[it] == true)return true;
        }
        dfsVis[node] = 0;
        return false;
    }
    
    
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int>vis(numCourses,0);
        vector<int>dfsVis(numCourses,0);
        vector<int>adj[numCourses];
        //push 1th then 0th
        for(auto it: prerequisites){
            adj[it[1]].push_back(it[0]);
        }
        //cycle check, if cycle found return false
        for(int i=0;i<numCourses;i++){
            if(!vis[i]){
                if(dfs(i,vis,dfsVis,adj)==true)return false;
            }
        }
        return true;
    }
};
