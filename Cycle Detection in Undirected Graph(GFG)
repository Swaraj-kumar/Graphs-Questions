    
    //BFS APPROACH
    
    bool bfs(int src,vector<int> &vis,vector<int> adj[]){
        vis[src] = 1;
        queue<pair<int,int>>q;
        q.push({src,-1});
        
        while(!q.empty()){
            int node = q.front().first;
            int par = q.front().second;
            q.pop();
            
            for(auto it: adj[node]){
                if(!vis[it]){
                q.push({it,node});
                vis[it] = 1;
                }
                else if(par != it)return true;
            }
        }
        return false;
    }
    
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(bfs(i,vis,adj))return true;
            }
        }
        return false;
    }
    
    
    //DFS APPROACH
    
        bool dfs(int node,int par,vector<int> &vis,vector<int> adj[]){
        vis[node] = 1;
        for(auto it: adj[node]){
            if(!vis[it]){
                if(dfs(it,node,vis,adj))return true;
            }
            else if(it != par)return true;
        }
        return false;
    }
    
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int>vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                if(dfs(i,-1,vis,adj) == true)return true;
            }
        }
        return false;
    }
