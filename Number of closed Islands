class Solution {
public:
    bool isValid(int i,int j,int row,int col,vector<vector<int>> &grid){
        if(i < 0 || i >= row || j < 0 || j >= col || grid[i][j] == 1)return true;
        return false;
    }
    
    void dfs(int i,int j,int row,int col,vector<vector<int>> &grid){
        if(isValid(i,j,row,col,grid))return;
        
        grid[i][j] = 1;
        
        dfs(i,j+1,row,col,grid);
        dfs(i,j-1,row,col,grid);
        dfs(i+1,j,row,col,grid);
        dfs(i-1,j,row,col,grid);
        
    }
    
    
    int closedIsland(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int ans = 0;
        //Boundary traversal
        //If at boundary we find 0 mark it 1 because it cannot be our ans
        for(int i=0;i<row;i++){
            dfs(i,0,row,col,grid);
            dfs(i,col-1,row,col,grid);  
        }
        
        for(int j=0;j<col;j++){
            dfs(0,j,row,col,grid);
            dfs(row-1,j,row,col,grid);  
        }
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j] == 0){
                    ans++;
                    dfs(i,j,row,col,grid);
                }
            }
        }
        return ans;
        
    }
};
